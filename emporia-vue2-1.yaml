esphome:
  name: emporia-vue2-fafb10
  comment: Emporia Vue2-1
  name_add_mac_suffix: false
  # This will allow for (future) project identification,
  # configuration and updates.
  project:
    name: meddle.emporia-vue2
    version: "1.0"

logger:

external_components:
  - source: github://emporia-vue-local/esphome@dev
    components: [ emporia_vue ]
dashboard_import:
  package_import_url: github://meddle99/vue2/emporia-vue2-1.yaml@main

esp32:
  board: esp32dev
  framework:
    type: esp-idf
    version: recommended

# Enable Home Assistant API
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  domain: .lan
# Sets up the improv via serial client for Wi-Fi provisioning
improv_serial:
# In combination with the `ap` this allows the user
# to provision wifi credentials to the device.
ota:
api:
# Sets up Bluetooth LE (Only on ESP32) to allow the user
# to provision wifi credentials to the device.
esp32_improv:
  authorizer: none
  
i2c:
  sda: 21
  scl: 22
  scan: false
  frequency: 200kHz  # recommended range is 50-200kHz
  id: i2c_a
time:
  - platform: sntp
    id: my_time

# these are called references in YAML. They allow you to reuse
# this configuration in each sensor, while only defining it once
.defaultfilters:
  - &moving_avg
    # we capture a new sample every 0.24 seconds, so the time can
    # be calculated from the number of samples as n * 0.24.
    sliding_window_moving_average:
      # we average over the past 2.88 seconds
      window_size: 12
      # we push a new value every 1.44 seconds
      send_every: 6
  - &invert
    # invert and filter out any values below 0.
    lambda: 'return max(-x, 0.0f);'
  - &pos
    # filter out any values below 0.
    lambda: 'return max(x, 0.0f);'
  - &abs
    # take the absolute value of the value
    lambda: 'return abs(x);'

sensor:
  - platform: emporia_vue
    i2c_id: i2c_a
    phases:
      - id: phase_a  # Verify that this specific phase/leg is connected to correct input wire color on device listed below
        input: BLACK  # Vue device wire color
        calibration: 0.02293  # 0.022 is used as the default as starting point but may need adjusted to ensure accuracy
        # To calculate new calibration value use the formula <in-use calibration value> * <accurate voltage> / <reporting voltage>
        voltage:
          name: "A Phase Voltage"
          filters: [*moving_avg, *pos]
      - id: phase_b  # Verify that this specific phase/leg is connected to correct input wire color on device listed below
        input: RED  # Vue device wire color
        calibration: 0.02139  # 0.022 is used as the default as starting point but may need adjusted to ensure accuracy
        # To calculate new calibration value use the formula <in-use calibration value> * <accurate voltage> / <reporting voltage>
        voltage:
          name: "B Phase Voltage"
          filters: [*moving_avg, *pos]
    ct_clamps:
      - phase_id: phase_a
        input: "A"  # Verify the CT going to this device input also matches the phase/leg
        power:
          name: "A Phase Power"
          id: a_phase_power
          device_class: power
          filters: [*moving_avg, *abs]
      - phase_id: phase_b
        input: "B"  # Verify the CT going to this device input also matches the phase/leg
        power:
          name: "B Phase Power"
          id: b_phase_power
          device_class: power
          filters: [*moving_avg, *abs]
      # Pay close attention to set the phase_id for each breaker by matching it to the phase/leg it connects to in the panel
      - { phase_id: phase_b, input:  "1", power: { name:  "Br01 Power", id:  ct01, filters: [ *moving_avg, *pos ] } }
      - { phase_id: phase_a, input:  "2", power: { name:  "Br03 Power", id:  ct02, filters: [ *moving_avg, *pos ] } }
      - { phase_id: phase_b, input:  "3", power: { name:  "Br05 Power", id:  ct03, filters: [ *moving_avg, *pos ] } }
      - { phase_id: phase_a, input:  "4", power: { name:  "Br07 Power", id:  ct04, filters: [ *moving_avg, *pos ] } }
      - { phase_id: phase_b, input:  "5", power: { name:  "Br09 Power", id:  ct05, filters: [ *moving_avg, *pos ] } }
      - { phase_id: phase_a, input:  "6", power: { name:  "Br11 Power", id:  ct06, filters: [ *moving_avg, *pos ] } }
      - { phase_id: phase_b, input:  "7", power: { name:  "Br13 Power", id:  ct07, filters: [ *moving_avg, *pos ] } }
      - { phase_id: phase_a, input:  "8", power: { name:  "Br15 Power", id:  ct08, filters: [ *moving_avg, *pos ] } }
      - { phase_id: phase_b, input:  "9", power: { name:  "Br17 Power", id:  ct09, filters: [ *moving_avg, *pos ] } }
      - { phase_id: phase_a, input: "10", power: { name: "Br19 Power", id: ct10, filters: [ *moving_avg, *pos ] } }
      - { phase_id: phase_b, input: "11", power: { name: "Br21 Power", id: ct11, filters: [ *moving_avg, *pos ] } }
      - { phase_id: phase_a, input: "12", power: { name: "Br23 Power", id: ct12, filters: [ *moving_avg, *pos ] } }
      - { phase_id: phase_b, input: "13", power: { name: "Br25 Power", id: ct13, filters: [ *moving_avg, *pos ] } }
      - { phase_id: phase_b, input: "14", power: { name: "Br02 Power", id: ct14, filters: [ *moving_avg, *pos, multiply: 2 ] } }
      - { phase_id: phase_b, input: "15", power: { name: "Br26 Power", id: ct15, filters: [ *moving_avg, *pos ] } }
      - { phase_id: phase_a, input: "16", power: { name: "Br28 Power", id: ct16, filters: [ *moving_avg, *pos ] } }
  - platform: template
    name: "Total Power"
    lambda: return id(a_phase_power).state + id(b_phase_power).state;
    update_interval: 1s
    id: total_power
    unit_of_measurement: "W"
  - platform: total_daily_energy
    name: "Total Daily Energy"
    power_id: total_power
    accuracy_decimals: 0
  - { power_id:  ct01, platform: total_daily_energy, accuracy_decimals: 0, name:  "Br01 Daily Energy" }
  - { power_id:  ct02, platform: total_daily_energy, accuracy_decimals: 0, name:  "Br03 Daily Energy" }
  - { power_id:  ct03, platform: total_daily_energy, accuracy_decimals: 0, name:  "Br05 Daily Energy" }
  - { power_id:  ct04, platform: total_daily_energy, accuracy_decimals: 0, name:  "Br07 Daily Energy" }
  - { power_id:  ct05, platform: total_daily_energy, accuracy_decimals: 0, name:  "Br09 Daily Energy" }
  - { power_id:  ct06, platform: total_daily_energy, accuracy_decimals: 0, name:  "Br11 Daily Energy" }
  - { power_id:  ct07, platform: total_daily_energy, accuracy_decimals: 0, name:  "Br13 Daily Energy" }
  - { power_id:  ct08, platform: total_daily_energy, accuracy_decimals: 0, name:  "Br15 Daily Energy" }
  - { power_id:  ct09, platform: total_daily_energy, accuracy_decimals: 0, name:  "Br17 Daily Energy" }
  - { power_id: ct10, platform: total_daily_energy, accuracy_decimals: 0, name: "Br19 Daily Energy" }
  - { power_id: ct11, platform: total_daily_energy, accuracy_decimals: 0, name: "Br21 Daily Energy" }
  - { power_id: ct12, platform: total_daily_energy, accuracy_decimals: 0, name: "Br23 Daily Energy" }
  - { power_id: ct13, platform: total_daily_energy, accuracy_decimals: 0, name: "Br25 Daily Energy" }
  - { power_id: ct14, platform: total_daily_energy, accuracy_decimals: 0, name: "Br02 Daily Energy" }
  - { power_id: ct15, platform: total_daily_energy, accuracy_decimals: 0, name: "Br26 Daily Energy" }
  - { power_id: ct16, platform: total_daily_energy, accuracy_decimals: 0, name: "Br28 Daily Energy" }
